import { Lens } from 'monocle-ts';
import { ReactNode } from 'react';
import { CSSProperties } from 'styled-components';
import { CheckboxGroupProps } from './CheckboxGroup';
import { Props as NumberInputProps } from './NumberInput';
import { Props as DropdownProps } from './Dropdown';
import { Props as SingleCheckboxProps } from './SingleCheckbox';
import { Props as TextInputProps } from './TextInput';
import { DisplayType, FormFieldType } from './types';
import { TextAreaProps } from './TextArea';
import { Props as TextNumberInputProps } from './TextNumberInput';
import { DatePickerProps } from './DatePicker';
import { TranslationGeneric } from '../../util';
import { Theme } from '../../theme/theme';
import { Props as ButtonProps } from '../Button';
import { Props as DropdownNumberProps } from './DropdownNumber';
import { Props as InputWithDropdownProps } from './InputWithDropdown';
import { Props as SwithProps } from './Switch';
import { Props as MultiSelectProps } from './MultiSelect';
declare type FormInput<P extends {}, L, T> = Omit<P, 'onChange' | 'value' | 'error'> & {
    lens: L;
    type: T;
};
export declare type MultiSelectField<FormData, TM> = FormInput<MultiSelectProps<TM>, Lens<FormData, Array<string>>, FormFieldType.MultiSelect>;
export declare type SwitchField<FormData, TM> = FormInput<SwithProps<TM>, Lens<FormData, boolean>, FormFieldType.Switch>;
export declare type InputWithDropdownField<FormData, TM> = FormInput<InputWithDropdownProps<TM>, Lens<FormData, string>, FormFieldType.InputWithDropdown>;
export declare type DropdownNumberField<FormData, TM> = FormInput<DropdownNumberProps<TM>, Lens<FormData, number>, FormFieldType.DropdownNumber>;
export declare type TextAreaField<FormData, TM> = FormInput<TextAreaProps<TM>, Lens<FormData, string>, FormFieldType.TextArea>;
export declare type TextNumberInputField<FormData, TM> = FormInput<TextNumberInputProps<TM>, Lens<FormData, number>, FormFieldType.TextNumber>;
export declare type TextInputField<FormData, TM> = FormInput<TextInputProps<TM>, Lens<FormData, string | null>, FormFieldType.TextInput>;
export declare type DatePickerField<FormData> = FormInput<DatePickerProps, Lens<FormData, string>, FormFieldType.DatePicker>;
export declare type DropdownField<FormData, TM> = FormInput<DropdownProps<TM>, Lens<FormData, string>, FormFieldType.Dropdown>;
export declare type CheckboxGroupField<FormData, TM> = FormInput<CheckboxGroupProps<TM>, Lens<FormData, Array<string>>, FormFieldType.CheckboxGroup>;
export declare type NumberInputField<FormData, TM> = FormInput<NumberInputProps<TM>, Lens<FormData, number>, FormFieldType.NumberInput>;
export declare type SingleCheckboxField<FormData, TM> = FormInput<SingleCheckboxProps<TM>, Lens<FormData, boolean>, FormFieldType.SingleCheckbox>;
declare type CommonFieldProps<FormData, TM> = {
    isVisible?: (formData: FormData) => boolean;
    isDisabled?: boolean;
    validate?: (formData: FormData) => boolean;
    maxwidth?: number;
};
export declare type SingleFormField<FormData, TM> = (CheckboxGroupField<FormData, TM> | NumberInputField<FormData, TM> | DatePickerField<FormData> | DropdownField<FormData, TM> | SingleCheckboxField<FormData, TM> | TextAreaField<FormData, TM> | TextNumberInputField<FormData, TM> | TextInputField<FormData, TM> | InputWithDropdownField<FormData, TM> | DropdownNumberField<FormData, TM> | SwitchField<FormData, TM> | MultiSelectField<FormData, TM>) & CommonFieldProps<FormData, TM>;
export declare type FormFieldRow<FormData, TM> = Array<SingleFormField<FormData, TM>>;
export declare type Fields<FormData, TM> = Array<SingleFormField<FormData, TM> | FormFieldRow<FormData, TM>>;
export declare type SingleFieldOrRow<FormData, TM> = SingleFormField<FormData, TM> | FormFieldRow<FormData, TM>;
export declare type GroupFields<FormData, TM> = Array<SingleFieldOrRow<FormData, TM>>;
export declare type FormFieldGroup<FormData, TM> = {
    title: keyof TM;
    style?: CSSProperties;
    type: FormFieldType.FormFieldGroup;
    fields: GroupFields<FormData, TM>;
};
export declare type FormField<FormData, TM> = SingleFormField<FormData, TM> | FormFieldRow<FormData, TM> | FormFieldGroup<FormData, TM> | FormSection<FormData, TM>;
export declare type SectionField<FormData, TM> = SingleFormField<FormData, TM> | FormFieldRow<FormData, TM> | FormFieldGroup<FormData, TM>;
export declare type SectionFields<FormData, TM> = Array<SectionField<FormData, TM>>;
export declare type FormSection<FormData, TM> = {
    title?: keyof TM;
    style?: CSSProperties;
    type: FormFieldType.FormSection;
    fields: SectionFields<FormData, TM>;
};
export declare const FormContent: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const FormFieldRowWrapper: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const FormFieldWrapper: import("styled-components").StyledComponent<"div", any, {
    width: string;
    maxwidth?: number;
}, never>;
export declare const FormFieldGroupWrapper: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const FormFieldGroupTitle: import("styled-components").StyledComponent<"h4", any, {}, never>;
export declare const FormSectionWrapper: import("styled-components").StyledComponent<"div", any, {}, never>;
export declare const FormSectionTitle: import("styled-components").StyledComponent<"h3", any, {}, never>;
export declare type Props<FormData, TM> = {
    children?: ReactNode;
    style?: Partial<Theme['form']>;
    data: FormData;
    display?: DisplayType;
    formFields: Array<FormField<FormData, TM>>;
    onSubmit?: () => void;
    onChange: (formState: FormData) => void;
    buttonProps?: Omit<ButtonProps<TM>, 'onClick'>;
    renderTopChildren?: (f: FormData) => ReactNode;
};
export declare const Form: <FormData_1 extends {}, TM extends TranslationGeneric>(props: Props<FormData_1, TM>) => JSX.Element;
export {};
